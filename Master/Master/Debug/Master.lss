
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_MSTR_Config>:
#include <util/delay.h>
#include <avr/interrupt.h>

void SPI_MSTR_Config()
{
	SPCR |= (1<<SPE)|(1<<SPIE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1); //enable SPI, enable master mode, select sckl = f/128
  82:	8d b1       	in	r24, 0x0d	; 13
  84:	83 6d       	ori	r24, 0xD3	; 211
  86:	8d b9       	out	0x0d, r24	; 13
	DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7);          //Set MOSI, SS, SCK as output pins
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	80 6b       	ori	r24, 0xB0	; 176
  8c:	87 bb       	out	0x17, r24	; 23
	SS_HIGH;                                        //Set SS pin to HIGH
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	80 61       	ori	r24, 0x10	; 16
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <SPI_Rotate>:
}


uint8_t SPI_Rotate(uint8_t x)
{
	SPDR = x;
  96:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <SPI_Rotate+0x2>
	uint8_t y = SPDR;
  9c:	8f b1       	in	r24, 0x0f	; 15
	return y;
}
  9e:	08 95       	ret

000000a0 <main>:

int main(void)
{
	SPI_MSTR_Config();
  a0:	0e 94 41 00 	call	0x82	; 0x82 <SPI_MSTR_Config>
	DDRA=0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0xc>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x12>
  b2:	00 00       	nop
	char Trash;
	_delay_ms(5);
	while (1)
	{
		int i = 0;
		SS_LOW;
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1c>
	char* str = "SPI Initiated";
	char Trash;
	_delay_ms(5);
	while (1)
	{
		int i = 0;
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
  c0:	0b c0       	rjmp	.+22     	; 0xd8 <main+0x38>
		SS_LOW;
		_delay_us(2);
		while(i<13)
		{
			Trash = SPI_Rotate(str[i]);
  c2:	fe 01       	movw	r30, r28
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_Rotate>
  ce:	91 e2       	ldi	r25, 0x21	; 33
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x30>
  d4:	00 00       	nop
			_delay_us(100);
			i++;
  d6:	21 96       	adiw	r28, 0x01	; 1
	while (1)
	{
		int i = 0;
		SS_LOW;
		_delay_us(2);
		while(i<13)
  d8:	cd 30       	cpi	r28, 0x0D	; 13
  da:	d1 05       	cpc	r29, r1
  dc:	94 f3       	brlt	.-28     	; 0xc2 <main+0x22>
		{
			Trash = SPI_Rotate(str[i]);
			_delay_us(100);
			i++;
		}
		SS_HIGH;
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x48>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x4e>
  ee:	00 00       	nop
  f0:	e1 cf       	rjmp	.-62     	; 0xb4 <main+0x14>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
